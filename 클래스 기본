package 클래스기본;
/*
[Class 특징]
객체 지향의 가장 큰 장점은 다른 것을 가져다 쓸 수 있는 것
다른 것을 잘 이용 하기 위해서는 분류를 잘해야 함 > 패키지 분류!
패키지로 분류가 안되는 좀 더 자잘한 분류는 클래스로 분류

클래스는 각종 메소드와 변수 등을 담는 분류이며 어떤 변수와 함수의 종류를 대변할 수 잇는 이름으로 지정 해야 함

[객체 지향 프로그래밍의 특징]
이런 클래스를 활용하는 객체 지향 프로그래밍의 특징은 4가지
1. 캡슐화 ( 클래스 내부에 데이터를 숨기고, 외부에서는 메소드를 통해서만 데이터 접근 )
2. 상속 ( 기존 클래스의 속성과 메소드를 다른 클래스에서 재사용 하거나 확장할 수 있음, 부모 클래스의 특성을 자식 클래스가 물려받는 속성 )
3. 다형성 ( 부모 클래스의 메소드를 하위 클래스에서 재정의하여 다시 사용하는 것. 같은 메소드를 호출하더라도 실제 실행되는 메소드는 객체의 타입에 따라 달라질 수 있다. )
4. 추상화 ( 복작한 시스템을 단순화 하여 필요한 부분만 표현 하는것. 핵심적인 특징만을 추출하여 구현. 세부 구현은 숨김으로써 복잡성을 낮춰줌)

객체를 정의 하는 틀 또는 설계도와 같은 의미, 클래스는 객체의 상태를 나타내는 필드와 객체의 행동을 나타내는 메소드로 구성
필드란 클래스에 포함된 변수를 의미

[클래스의 객체화(instance화)]
클래스를 사용 하기 위해서는 해당 클래스 타입의 객체를 선언 해야 한다.
객체를 선언하는 과정을 클래스의 인스턴스화. 인스턴스란 메모리에 할당된 객체.

클래스는 하나의 자료형이 될 수 있다. 변수에는 항상 자료형이 존재
그 변수가 정수라면 int, 실수라면 double, 문자라면 String 등

(ex) Scanner sc = new Scanner();
Scanner() 라는 클래스를 new로 복사해 가져와서 Scanner라는 자료형으로 sc 라는 변수에 넣어라.

클래스의 객체화라는 것이 쉽게 얘기하면 복사하는 개념.
클래스는 여러번 복사해서 사용 가능한데 이 여러번 복사한 클래스는 다 각기 다른 객체라는 것을 유의 !
 */

public class Student {
    // 클래스의 선언 > 첫자는 대문자로 사용
    // 클래스 속성을 구현 하는 멤버 변수 (필드)
    private int id;
    private String name;
    private int grade;
    private String addr;

    // 메소드 추가
    public void showStudentInfo() {
        System.out.println(name + "의 주소는 " + addr + " 입니다.");
    }

    public String setName(String name) {
        this.name = name;
        return "참";
    }

    public void setAddr(String addr) {
        this.addr = addr;
    }

}

// 생성한 클래스를 바탕으로 값 출력 

package 클래스기본;

public class StudentInfo {
    public static void main(String[] args) {

        // 클래스로부터 객체를 생성하려면 new 연산자를 사용
        // 클래스 변수 = new 클래스();

        Student s1 = new Student();
        s1.setName("우희");
        s1.setAddr("서울시 관악구 봉천동");
        s1.showStudentInfo();
        Student s2 = new Student();
        s2.setName("장성");
        s2.setAddr("서울시 서초구 양재동");
        s2.showStudentInfo();
    }
}

[출력]
우희의 주소는 서울시 관악구 봉천동 입니다.
장성의 주소는 서울시 서초구 양재동 입니다.







